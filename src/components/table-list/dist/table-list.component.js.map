{"version":3,"sources":["../src/table-list.component.js"],"names":["LinkCell","rowIndex","data","col","config","props","title","url","action","value","DateCell","columns","dateFormat","TextCell","Cells","link","text","date","TableList","renderColumn","bind","getTableConfig","getColumnDataCell","getColumnHeaderCell","getDefaultSortDir","onSortChange","document","getElementsByTagName","querySelector","tag","createElement","id","innerHTML","appendChild","column","columnName","sortEnable","tableConfig","sortByField","sortDirection","DESC","columnKey","sortDir","sortCallback","console","error","headerCell","header","type","CellType","columnsData","getColumnsData","index","dataCell","isDisabled","width","getColumnsConfig","defaultRowHeight","defaultHeaderHeight","tableWidth","tableHeight","height","Object","keys","map","key","i","propTypes","object","isRequired"],"mappings":"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","file":"table-list.component.js","sourcesContent":["/**\n * TableList is component to render data as list\n * ex: <TableList tableConfig={tableConfig} rowsCount={10} total={100} size={10} dataSize={10} />\n *  props: tableConfig: //(Object || Required) it is required and must be in below format\n *          {\n *              sortUpIcon: <i class=\"material-icons\">&#xE5DB;</i>, //(String | Optional) :- sort up arrow, default is null\n *              sortDownIcon: <i class=\"material-icons\">&#xE5DB;</i>, //(String | Optional) :- sort down arrow, default is null\n *              sortByField: 'age', //(String | Optional) :- enable sort for specific by default\n *              sortDirection: 'ASC | DESC', //(String | Optional) :- direction for default enabled sort, default is DESC\n *              sortCallback: func, //(Function | Optional) :- it calls after sort applied,   \n *              total:           \n *              columns: { //(Object | Required) :- columns config\n *                  name: {\n *                      header: 'name', //(String | Required) :- column title\n *                      type: 'link', //(String | Required) :- type of column, i.e link/text/date\n *                      width: 100, //(Number | Optional) :- width of column, default is 100\n *                      sortEnable: true, //(Boolean | Optional) :- if need to enable sort\n *                  },\n *                  age: {\n *                      header: 'age',\n *                      type: 'text',\n *                      width: 100,\n *                  },\n *                  dob: {\n *                      header: 'dob',\n *                      type: 'date',\n *                      dateFormat: 'MM DD YYYY', //if it is date type\n *                      width: 50,\n *                  }\n *              },\n *              data: [{ //(Array | Required) :- array of objects, i.e columns data. Note: keys provided in coumns object must be same in data object\n *                  name: {     \n *                              value: 'foo', //(String | Required) :- value of column\n *                              title: 'this is foo',  //(String | Optional) :- title of column\n *                              url: 'abc.com', //(String | Optional) :- if the type of column is link then it is must.\n *                              action: func //(Function | Optional) :- if the type of column is link then it can be provide.\n *                        },\n *                  age: {\n *                              value: 30,\n *                        }\n *                  dob: {\n *                              value: 2453154423122315423,\n *                        }\n *              },{\n *                  name: {\n *                              value: 'bar',\n *                              url: 'abc.com', //if it is link type\n *                        },\n *                  age: {\n *                              value: 25,\n *                        }\n *                  dob: {\n *                              value: 2453154423122315423,\n *                        }  \n *              }]\n *          }\n * \n * note: <TableList /> uses npm's 'fixed-data-table-2', 'reaco-pagination' components. so can pass their props directly.\n*/\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport dateFormat from 'dateformat';\nimport {\n    isUndefined,\n    isNull,\n    isEmpty,\n    isArray,\n    isFunction\n} from 'lodash';\nimport { Table, Column, Cell } from 'fixed-data-table-2';\nimport {\n    CELL_TYPES,\n    SORT_TYPES\n} from './table-list.constants';\nimport SortHeaderCell from './table-list-sort.component';\nimport Pagination from 'reaco-pagination';\n\n/* style */\nimport cssStyle from './table-list';\n\nconst LinkCell = ({rowIndex, data, col, config, ...props}) => {\n    return <Cell {...props}>\n        <a className=\"table-list-link table-list-val\" title={data[rowIndex][col].title || ''} href={data[rowIndex][col].url} onClick={data[rowIndex][col].action}>{data[rowIndex][col].value || '-'}</a>\n    </Cell>\n};\n\nconst DateCell = ({rowIndex, data, col, config, ...props}) => {\n    return <Cell {...props}>\n        <span className=\"table-list-date table-list-val\" title={data[rowIndex][col].title || ''}>{data[rowIndex][col].value ? dateFormat(data[rowIndex][col].value, config.columns[col].dateFormat || 'dd mmm yyyy') : '-'}</span>\n    </Cell>\n};\n\nconst TextCell = ({rowIndex, data, col, config, ...props}) => {\n    return <Cell {...props}>\n        <span className=\"table-list-text table-list-val\" title={data[rowIndex][col].title || ''}>{data[rowIndex][col].value || '-'}</span>\n    </Cell>\n};\n\nconst Cells = {\n    [CELL_TYPES.link]: LinkCell,\n    [CELL_TYPES.text]: TextCell,\n    [CELL_TYPES.date]: DateCell\n}\n\nexport default class TableList extends Component {\n    constructor(props) {\n        super(props);\n\n        //class functions bindings\n        this.renderColumn = this.renderColumn.bind(this);\n        this.getTableConfig = this.getTableConfig.bind(this);\n        this.getColumnDataCell = this.getColumnDataCell.bind(this);\n        this.getColumnHeaderCell = this.getColumnHeaderCell.bind(this);\n        this.getDefaultSortDir = this.getDefaultSortDir.bind(this);\n        this.onSortChange = this.onSortChange.bind(this);\n    }\n\n    componentDidMount() {\n        if (!document.getElementsByTagName('head')[0].querySelector('style[id=\"react-table-list\"]')) {\n            let tag = document.createElement('style');\n            tag.id = 'react-table-list';\n            tag.innerHTML = cssStyle;\n            document.getElementsByTagName('head')[0].appendChild(tag);\n        }\n    }\n\n    getDefaultSortDir(column, columnName) {\n        if (!isEmpty(column) && !isEmpty(columnName) && column.sortEnable) {\n            const tableConfig = this.getTableConfig();\n            if (columnName === tableConfig.sortByField) {\n                return tableConfig.sortDirection || SORT_TYPES.DESC;\n            }\n        }\n        return null;\n    }\n\n    getTableConfig() {\n        const tableConfig = this.props.tableConfig;\n        if (!isEmpty(tableConfig)) {\n            return tableConfig;\n        }\n        return {};\n    }\n\n    getColumnsData() {\n        const tableConfig = this.getTableConfig();\n        if (!isEmpty(tableConfig) && isArray(tableConfig.data)) {\n            return tableConfig.data;\n        }\n        return [];\n    }\n\n    getColumnsConfig() {\n        const tableConfig = this.getTableConfig();\n        return !isEmpty(tableConfig) && !isEmpty(tableConfig.columns) && tableConfig.columns;\n    }\n\n    onSortChange(columnKey, sortDir) {\n        const tableConfig = this.getTableConfig();\n        if (!isEmpty(tableConfig)) {\n            const sortCallback = tableConfig.sortCallback;\n            if (isFunction(sortCallback)) sortCallback(columnKey, sortDir);\n        }\n    }\n\n    getColumnHeaderCell(column, columnName) {\n        if (isEmpty(column) || isEmpty(columnName)) {\n            console.error('[TableList] Invalid column header config passed');\n            return null;\n        }\n        const headerCell = <Cell>{column.header}</Cell>;\n        if (column.sortEnable) {\n            const sortDir = this.getDefaultSortDir(column, columnName);\n            return <SortHeaderCell onSortChange={this.onSortChange} sortDir={sortDir} {...this.props}>{headerCell}</SortHeaderCell>;\n        }\n        return headerCell;\n    }\n\n    getColumnDataCell(column, columnName) {\n        if (isEmpty(column) || isEmpty(column.type) || isEmpty(CELL_TYPES[column.type]) || isUndefined(Cells[CELL_TYPES[column.type]]) || isNull(Cells[CELL_TYPES[column.type]])) {\n            console.error('[TableList] Invalid column config passed');\n            return null;\n        }\n        const CellType = Cells[CELL_TYPES[column.type]];\n        const tableConfig = this.getTableConfig();\n        const columnsData = this.getColumnsData();\n        if (isEmpty(columnsData)) {\n            console.error('[TableList] Invalid data config passed');\n            return null;\n        }\n        return <CellType data={columnsData} col={columnName} config={tableConfig} />;\n    }\n\n    renderColumn(column, columnName, index) {\n        const headerCell = this.getColumnHeaderCell(column, columnName);\n        const dataCell = this.getColumnDataCell(column, columnName);\n        const tableConfig = this.getTableConfig();\n        if (isNull(headerCell) || isNull(dataCell)) {\n            console.error('[TableList] Invalid config passed');\n            return null;\n        }\n        if (tableConfig.columns[columnName].isDisabled) {\n            return null;\n        }\n        return <Column\n            columnKey={columnName}\n            key={`${columnName}${index}`}\n            header={headerCell}\n            cell={dataCell}\n            width={column.width || 100}\n        />\n    }\n\n    render() {\n        const columns = this.getColumnsConfig();\n        if (isEmpty(columns)) {\n            console.error('[TableList] Invalid columns config passed');\n            return null;\n        }\n        const defaultRowHeight = 50;\n        const defaultHeaderHeight = 50;\n        const tableWidth = this.props.width || 1000;\n        const tableHeight = this.props.height || 500;\n        return (\n            <div className=\"ofb-table-list\">\n                <Table\n                    rowHeight={defaultRowHeight}\n                    headerHeight={defaultHeaderHeight}\n                    width={tableWidth}\n                    height={tableHeight}\n                    {...this.props}>\n                    {columns && Object.keys(columns).map((key, i) => {\n                        return this.renderColumn(columns[key], key, i);\n                    })}\n                </Table>\n                <Pagination {...this.props} />\n            </div>\n        )\n    }\n}\n\nTableList.propTypes = {\n    tableConfig: PropTypes.object.isRequired\n}"]}